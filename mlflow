# Importar librerías necesarias
import mlflow
import mlflow.sklearn
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.datasets import load_diabetes

# Cargar el conjunto de datos de diabetes
data = load_diabetes()
X = data.data
y = data.target

# Dividir el conjunto de datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Iniciar el experimento de MLflow
mlflow.start_run()

# Entrenar el modelo
model = LinearRegression()
model.fit(X_train, y_train)

# Realizar predicciones en el conjunto de prueba
y_pred = model.predict(X_test)

# Calcular y registrar métricas
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Registrar el modelo y las métricas en MLflow
with mlflow.start_run():
    # Log del modelo
    mlflow.sklearn.log_model(model, "model")
    
    # Log de métricas
    mlflow.log_metric("mse", mse)
    
    # Log de parámetros adicionales (puedes ajustarlos según tus necesidades)
    mlflow.log_param("algorithm", "Linear Regression")
    mlflow.log_param("features", X_train.shape[1])
    mlflow.log_param("random_state", 42)
    mlflow.set_tag("version", "v1.0")
    mlflow.set_tag("environment", "production")
    mlflow.set_tag("owner", "your_name")

    # Obtener el ID del run actual
    run_id = mlflow.active_run().info.run_id

    # Registrar el modelo en el Model Registry
    model_version = mlflow.register_model(f"runs:/{run_id}/model", "My Model")

    # Configurar el entorno de producción
    mlflow.set_tag(f"models:/My Model/{model_version}/flavors/scikit-learn", "production", "true")

    # Evaluar el modelo y registrar la métrica de evaluación
    mlflow.sklearn.evaluate(model, X_test, y_test, "mse_eval")

# Finalizar el experimento
mlflow.end_run()
